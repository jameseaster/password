{"version":3,"sources":["password.js","App.js","serviceWorker.js","index.js"],"names":["generate","length","password","chars","randomIdx","Math","floor","random","randomChar","App","useState","setLength","setPassword","className","type","min","max","value","onChange","e","preventDefault","target","onClick","passwordGenerator","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAuBeA,MAtBf,SAAkBC,GAQhB,IAPA,IAIIC,EAAW,GACTC,EAAQ,CALA,6BACA,6BACD,YACA,gCAINF,EAAS,GAAG,CAEjB,IAAIG,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMF,QAE7CO,EAAaH,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMC,GAAWH,QAE7DC,GAAYC,EAAMC,GAAWI,GAE7BP,GAAU,EAGZ,OAAOC,GCWMO,MA1Bf,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACNT,EADM,KACEU,EADF,OAEmBD,mBAAS,IAF5B,mBAENR,EAFM,KAEIU,EAFJ,KAWb,OACE,yBAAKC,UAAU,OACb,2BACEC,KAAK,SACLC,IAAK,EACLC,IAAK,IACLC,MAAOhB,EACPiB,SAXe,SAACC,GACpBA,EAAEC,iBACFT,EAAUQ,EAAEE,OAAOJ,UAWjB,4BAAQK,QAhBQ,WAClBV,EAAYW,EAAkBtB,MAe5B,qBACCC,GAAY,4BAAKA,KCdJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b93d6b37.chunk.js","sourcesContent":["// generate a random password of a given length\nfunction generate(length) {\n  const lower = \"abcdefghijklmnopqrstuvwxyz\";\n  const upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const nums = \"123456789\";\n  const symbols = `!@#$%^&*()_+{}|[]\\:\";'<>?,./`;\n  let password = \"\";\n  const chars = [lower, upper, nums, symbols];\n\n  while (length > 0) {\n    // select a random char set\n    let randomIdx = Math.floor(Math.random() * chars.length);\n    // select a random char from random char set\n    let randomChar = Math.floor(Math.random() * chars[randomIdx].length);\n    // add char to password\n    password += chars[randomIdx][randomChar];\n    // decrement length\n    length -= 1;\n  }\n\n  return password;\n}\n\nexport default generate;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport passwordGenerator from \"./password\";\n\nfunction App() {\n  const [length, setLength] = useState(0);\n  const [password, setPassword] = useState(\"\");\n\n  const handleClick = () => {\n    setPassword(passwordGenerator(length));\n  };\n  const handleChange = (e) => {\n    e.preventDefault();\n    setLength(e.target.value);\n  };\n  return (\n    <div className=\"App\">\n      <input\n        type=\"number\"\n        min={0}\n        max={100}\n        value={length}\n        onChange={handleChange}\n      ></input>\n      <button onClick={handleClick}>Generate Password</button>\n      {password && <h3>{password}</h3>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}